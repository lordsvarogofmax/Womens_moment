import os
import sys
import logging
import requests
import re
import hashlib
import time
from io import BytesIO
from flask import Flask, request
import PyPDF2
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image
import sqlite3
import json
from datetime import datetime, timedelta
import openpyxl
import numpy as np
import cv2

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
DB_PATH = os.getenv("DB_PATH", "bot.db")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "364191893")

# –†–µ–∂–∏–º—ã —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (–¥–ª—è Render free tier)
LOW_RESOURCE = os.getenv("LOW_RESOURCE", "1") == "1"
OCR_DPI = int(os.getenv("OCR_DPI", "150"))  # –Ω–∏–∂–µ DPI ‚Äî –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç—å –∏ CPU
OCR_MAX_WORKERS = int(os.getenv("OCR_MAX_WORKERS", "1"))  # 1 –ø–æ—Ç–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
OCR_TEXT_THRESHOLD_CHARS = int(os.getenv("OCR_TEXT_THRESHOLD_CHARS", "30"))  # –ø–æ—Ä–æ–≥ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–∫—Å—Ç–æ–≤–æ–π
OCR_ENABLE_RETRY = os.getenv("OCR_ENABLE_RETRY", "1") == "1"  # –≤–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
OCR_RETRY_SCALE = float(os.getenv("OCR_RETRY_SCALE", "1.8"))  # –º–∞—Å—à—Ç–∞–± –∞–ø—Å–∫–µ–π–ª–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ
OCR_RETRY_EXTRA_PSMS = os.getenv("OCR_RETRY_EXTRA_PSMS", "1,11,12,13")  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ PSM –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞–∫–µ—Ç–æ–≤
OCR_FUTURE_TIMEOUT_SEC = int(os.getenv("OCR_FUTURE_TIMEOUT_SEC", "60"))  # —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
OCR_TOTAL_TIMEOUT_SEC = int(os.getenv("OCR_TOTAL_TIMEOUT_SEC", "180"))  # –æ–±—â–∏–π –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
OCR_RETRY_MAX_PSMS = int(os.getenv("OCR_RETRY_MAX_PSMS", "2"))  # –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —á–∏—Å–ª–æ PSM –ø—Ä–∏ —Ä–µ—Ç—Ä–∞–µ
OCR_MAX_UPSCALED_DIM = int(os.getenv("OCR_MAX_UPSCALED_DIM", "2000"))  # –º–∞–∫—Å–∏–º—É–º –ø–∏–∫—Å–µ–ª–µ–π –ø–æ —Å—Ç–æ—Ä–æ–Ω–µ –ø–æ—Å–ª–µ –∞–ø—Å–∫–µ–π–ª–∞

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL not set!")
    sys.exit(1)

app = Flask(__name__)

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = set()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–∂–∏–¥–∞—é—Ç –ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞)
user_states = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö OCR-PDF, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pending_files = {}
# –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ conversion_id
awaiting_comment = {}
# –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
processed_callback_ids = set()

# --- –ë–î –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    try:
        conn = get_db()
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                event TEXT NOT NULL,
                meta TEXT,
                created_at TEXT NOT NULL
            )
            """
        )
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS errors (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                error_code TEXT,
                message TEXT,
                created_at TEXT NOT NULL
            )
            """
        )
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                conversion_id TEXT NOT NULL,
                rating INTEGER CHECK (rating BETWEEN 1 AND 5),
                comment TEXT,
                created_at TEXT NOT NULL,
                UNIQUE(user_id, conversion_id)
            )
            """
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")

def log_event(user_id, event, meta=None):
    try:
        conn = get_db()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO events (user_id, event, meta, created_at) VALUES (?, ?, ?, ?)",
            (str(user_id), event, json.dumps(meta) if meta is not None else None, datetime.utcnow().isoformat())
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è –≤ –ë–î")

def log_error(user_id, error_code, message):
    try:
        conn = get_db()
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO errors (user_id, error_code, message, created_at) VALUES (?, ?, ?, ?)",
            (str(user_id) if user_id else None, error_code, str(message), datetime.utcnow().isoformat())
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–∫–∏ –≤ –ë–î")

def save_feedback(user_id, conversion_id, rating=None, comment=None):
    try:
        conn = get_db()
        cur = conn.cursor()
        # upsert –ø–æ –ø–∞—Ä–µ (user_id, conversion_id)
        cur.execute(
            """
            INSERT INTO feedback (user_id, conversion_id, rating, comment, created_at)
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id, conversion_id) DO UPDATE SET
                rating=COALESCE(excluded.rating, feedback.rating),
                comment=COALESCE(excluded.comment, feedback.comment)
            """,
            (str(user_id), str(conversion_id), int(rating) if rating is not None else None, comment, datetime.utcnow().isoformat())
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–∫–∏ –≤ –ë–î")

def get_feedback(user_id, conversion_id):
    try:
        conn = get_db()
        cur = conn.cursor()
        cur.execute(
            "SELECT user_id, conversion_id, rating, comment, created_at FROM feedback WHERE user_id=? AND conversion_id=?",
            (str(user_id), str(conversion_id))
        )
        row = cur.fetchone()
        conn.close()
        return row
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è feedback –∏–∑ –ë–î")
        return None

def build_rating_keyboard(conversion_id):
    return {
        "inline_keyboard": [[
            {"text": "‚≠ê", "callback_data": f"RATE_1|{conversion_id}"},
            {"text": "‚≠ê‚≠ê", "callback_data": f"RATE_2|{conversion_id}"},
            {"text": "‚≠ê‚≠ê‚≠ê", "callback_data": f"RATE_3|{conversion_id}"},
        ], [
            {"text": "‚≠ê‚≠ê‚≠ê‚≠ê", "callback_data": f"RATE_4|{conversion_id}"},
            {"text": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", "callback_data": f"RATE_5|{conversion_id}"},
        ], [
            {"text": "üóíÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "callback_data": f"FB_COMMENT|{conversion_id}"}
        ]]
    }

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
DESCRIPTION_MESSAGE = (
    "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (PDF ‚Üí –¢–µ–∫—Å—Ç)\n\n"
    "–ë–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF-—Ñ–∞–π–ª—ã –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç.\n\n"
    "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
    "‚úÖ  OCR (–ú–∞—à–∏–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ): –≤—Å–µ PDF –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ OCR –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞\n"
    "‚úÖ  –Ø–∑—ã–∫–∏: —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
    "‚úÖ  –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç .txt —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n"
    "‚úÖ  –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:\n\n"
    "- –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
    "- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR\n"
    "- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
    "- —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —Å–∫–ª–µ–π–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤\n\n"
    "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
    "‚ùó –¢–æ–ª—å–∫–æ PDF: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, DOCX –∏ –¥—Ä. –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è\n"
    "‚ùó –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –º–∞–∫—Å–∏–º—É–º ‚Äî 20 –ú–ë\n"
    "‚ùó –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∏—Å—Ö–æ–¥–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ/—Ç–∞–±–ª–∏—Ü—ã/–∫–æ–ª–æ–Ω–∫–∏ –º–æ–≥—É—Ç –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è ‚Äî –Ω–∞ –≤—ã—Ö–æ–¥–µ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç\n"
    "‚ùó –ö–∞—á–µ—Å—Ç–≤–æ OCR: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —à—É–º)\n\n"
    "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n\n"
    "1‚É£   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é\n"
    "2‚É£   –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª (–¥–æ 20 –ú–ë)\n"
    "‚úÖ  –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç .txt —Å —Ç–µ–∫—Å—Ç–æ–º\n\n"
    "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤: —Å–æ–∂–º–∏—Ç–µ PDF, —Ä–∞–∑–±–µ–π—Ç–µ –ø–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª."
)

def get_main_keyboard():
    return {
        "keyboard": [[
            {"text": "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"},
            {"text": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"}
        ]],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def get_message_hash(message):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_str = str(message.get('message_id', '')) + str(message.get('date', ''))
    return hashlib.md5(message_str.encode()).hexdigest()

def is_message_processed(message_hash):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"""
    return message_hash in processed_messages

def mark_message_processed(message_hash):
    """–û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ"""
    processed_messages.add(message_hash)
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞) –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    if len(processed_messages) > 1000:
        logger.info("üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        processed_messages.clear()

def set_user_waiting_for_file(chat_id, waiting=True):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if waiting:
        user_states[chat_id] = {"waiting_for_file": True, "timestamp": time.time()}
    else:
        user_states.pop(chat_id, None)

def is_user_waiting_for_file(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    if chat_id not in user_states:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 –º–∏–Ω—É—Ç)
    if time.time() - user_states[chat_id]["timestamp"] > 1800:
        user_states.pop(chat_id, None)
        return False
    
    return user_states[chat_id].get("waiting_for_file", False)

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {"chat_id": chat_id, "text": text}
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        response = requests.post(url, json=data, timeout=10)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def send_document(chat_id, file_buffer, filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
        files = {"document": (filename, file_buffer, "text/plain")}
        data = {"chat_id": chat_id}
        
        response = requests.post(url, files=files, data=data, timeout=60)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

def send_binary_document(chat_id, file_buffer, filename, mime_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, .xlsx)."""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
        files = {"document": (filename, file_buffer, mime_type)}
        data = {"chat_id": chat_id}
        response = requests.post(url, files=files, data=data, timeout=60)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

def generate_excel_stats(last_days=30):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π."""
    cutoff = (datetime.utcnow() - timedelta(days=last_days)).isoformat()
    conn = get_db()
    cur = conn.cursor()
    # Overview
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM events WHERE created_at >= ?", (cutoff,))
    unique_users = cur.fetchone()[0] or 0
    cur.execute("SELECT COUNT(*) FROM events WHERE event='file_received' AND created_at >= ?", (cutoff,))
    file_uses = cur.fetchone()[0] or 0
    cur.execute("SELECT COUNT(*) FROM events WHERE event='ocr_success' AND created_at >= ?", (cutoff,))
    ocr_success = cur.fetchone()[0] or 0
    cur.execute("SELECT COUNT(*) FROM events WHERE event='ocr_error' AND created_at >= ?", (cutoff,))
    ocr_errors = cur.fetchone()[0] or 0
    cur.execute("SELECT COUNT(*) FROM errors WHERE created_at >= ?", (cutoff,))
    total_errors = cur.fetchone()[0] or 0
    cur.execute("SELECT rating, COUNT(*) FROM feedback WHERE rating IS NOT NULL AND created_at >= ? GROUP BY rating ORDER BY rating", (cutoff,))
    ratings_rows = cur.fetchall()
    # Daily events
    cur.execute(
        """
        SELECT substr(created_at,1,10) as day, event, COUNT(*) c
        FROM events
        WHERE created_at >= ?
        GROUP BY day, event
        ORDER BY day, event
        """ , (cutoff,)
    )
    daily_events = cur.fetchall()
    # Errors detail
    cur.execute(
        """
        SELECT substr(created_at,1,10) as day, error_code, COUNT(*) c
        FROM errors
        WHERE created_at >= ?
        GROUP BY day, error_code
        ORDER BY c DESC
        """, (cutoff,)
    )
    errors_agg = cur.fetchall()
    cur.execute("SELECT created_at, user_id, error_code, message FROM errors WHERE created_at >= ? ORDER BY created_at DESC LIMIT 1000", (cutoff,))
    errors_raw = cur.fetchall()
    # Feedback raw (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ conversion_id)
    cur.execute("SELECT created_at, user_id, conversion_id, rating, comment FROM feedback WHERE created_at >= ? ORDER BY created_at DESC", (cutoff,))
    feedback_raw = cur.fetchall()
    conn.close()

    wb = openpyxl.Workbook()
    ws_overview = wb.active
    ws_overview.title = "Overview"
    ws_overview.append(["Metric", "Value"])
    ws_overview.append(["Unique users", unique_users])
    ws_overview.append(["File uses", file_uses])
    ws_overview.append(["OCR success", ocr_success])
    ws_overview.append(["OCR errors", ocr_errors])
    ws_overview.append(["Errors total", total_errors])
    ws_overview.append(["Ratings (rating:count)", ", ".join([f"{r[0]}:{r[1]}" for r in ratings_rows]) if ratings_rows else "-"])

    ws_events = wb.create_sheet("DailyEvents")
    ws_events.append(["Day", "Event", "Count"])
    for row in daily_events:
        ws_events.append(list(row))

    ws_errors = wb.create_sheet("ErrorsAgg")
    ws_errors.append(["Day", "ErrorCode", "Count"])
    for row in errors_agg:
        ws_errors.append(list(row))

    ws_errors_raw = wb.create_sheet("ErrorsRaw")
    ws_errors_raw.append(["CreatedAt", "UserId", "ErrorCode", "Message"])
    for row in errors_raw:
        ws_errors_raw.append(list(row))

    ws_feedback = wb.create_sheet("Feedback")
    ws_feedback.append(["CreatedAt", "UserId", "ConversionId", "Rating", "Comment"])
    for row in feedback_raw:
        ws_feedback.append(list(row))

    buf = BytesIO()
    wb.save(buf)
    buf.seek(0)
    return buf

def answer_callback_query(callback_query_id, text=None):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–Ω—è—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
        data = {"callback_query_id": callback_query_id}
        if text:
            data["text"] = text
        response = requests.post(url, data=data, timeout=10)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ answerCallbackQuery: {response.status_code} - {response.text}")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ answerCallbackQuery")

def build_split_options_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ OCR-PDF"""
    return {
        "inline_keyboard": [[
            {"text": "‚úÇÔ∏è —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª", "callback_data": "SPLIT_PDF"},
            {"text": "üîü —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü", "callback_data": "OCR_FIRST_10"}
        ]]
    }

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    if not text:
        return ""
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å–ª–æ–≤
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])-\n([–∞-—è–ê-–Øa-zA-Z])', r'\1\2', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'(?<!\n)\n(?!\n)', ' ', text)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r' +', ' ', text)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∏–ø—à–∏–µ—Å—è —Å–ª–æ–≤–∞ (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏)
    text = re.sub(r'([–∞-—è])([–ê-–Ø])', r'\1 \2', text)
    text = re.sub(r'([a-z])([A-Z])', r'\1 \2', text)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∏–ø—à–∏–µ—Å—è —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])(\d)', r'\1 \2', text)
    text = re.sub(r'(\d)([–∞-—è–ê-–Øa-zA-Z])', r'\1 \2', text)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–∏–ø—à–∏–µ—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])([.,:;!?])', r'\1\2', text)
    text = re.sub(r'([.,:;!?])([–∞-—è–ê-–Øa-zA-Z])', r'\1 \2', text)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ OCR –æ—à–∏–±–∫–∏
    ocr_fixes = {
        '0': '–û',  # –¶–∏—Ñ—Ä–∞ 0 –≤–º–µ—Å—Ç–æ –±—É–∫–≤—ã –û –≤ –Ω–∞—á–∞–ª–µ —Å–ª–æ–≤
        '1': 'I',  # –¶–∏—Ñ—Ä–∞ 1 –≤–º–µ—Å—Ç–æ –±—É–∫–≤—ã I
        '5': 'S',  # –¶–∏—Ñ—Ä–∞ 5 –≤–º–µ—Å—Ç–æ –±—É–∫–≤—ã S
        '8': 'B',  # –¶–∏—Ñ—Ä–∞ 8 –≤–º–µ—Å—Ç–æ –±—É–∫–≤—ã B
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–ª–æ–≤
    for wrong, correct in ocr_fixes.items():
        # –ó–∞–º–µ–Ω—è–µ–º —Ü–∏—Ñ—Ä—ã –Ω–∞ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–∞—Ö (–Ω–æ –Ω–µ –≤ —á–∏—Å–ª–∞—Ö)
        text = re.sub(rf'\b{wrong}([–∞-—è–ê-–Øa-zA-Z])', rf'{correct}\1', text)
        text = re.sub(rf'([–∞-—è–ê-–Øa-zA-Z]){wrong}\b', rf'\1{correct}', text)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    text = re.sub(r' +', ' ', text)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    text = '\n'.join(line.strip() for line in text.splitlines())
    
    return text.strip()

def pil_to_cv(img_pil):
    arr = np.array(img_pil)
    if arr.ndim == 2:
        return arr
    # PIL is RGB, cv2 expects BGR
    return cv2.cvtColor(arr, cv2.COLOR_RGB2BGR)

def cv_to_pil(img_cv):
    if len(img_cv.shape) == 2:
        rgb = cv2.cvtColor(img_cv, cv2.COLOR_GRAY2RGB)
    else:
        rgb = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)
    return Image.fromarray(rgb)

def deskew_image(gray):
    # Estimate skew angle and rotate to deskew
    try:
        thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]
        inv = 255 - thresh
        coords = np.column_stack(np.where(inv > 0))
        angle = 0.0
        if coords.size > 0:
            rect = cv2.minAreaRect(coords)
            angle = rect[-1]
            if angle < -45:
                angle = -(90 + angle)
            else:
                angle = -angle
        (h, w) = gray.shape[:2]
        center = (w // 2, h // 2)
        M = cv2.getRotationMatrix2D(center, angle, 1.0)
        rotated = cv2.warpAffine(gray, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
        return rotated
    except Exception:
        return gray

def preprocess_image_for_ocr(img_pil):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–ª–æ—Ö–∏—Ö —Å–∫–∞–Ω–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""
    img_cv = pil_to_cv(img_pil)
    if img_cv.ndim == 3:
        gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
    else:
        gray = img_cv
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Render (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å)
    scale_factor = 2.0  # –£–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    if gray.shape[0] < 1500 or gray.shape[1] < 1500:
        new_width = int(gray.shape[1] * scale_factor)
        new_height = int(gray.shape[0] * scale_factor)
        gray = cv2.resize(gray, (new_width, new_height), interpolation=cv2.INTER_CUBIC)
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    clahe = cv2.createCLAHE(clipLimit=4.0, tileGridSize=(8,8))
    gray = clahe.apply(gray)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    gray = cv2.equalizeHist(gray)
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
    gray = cv2.bilateralFilter(gray, d=11, sigmaColor=100, sigmaSpace=100)
    gray = cv2.medianBlur(gray, 5)
    
    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ
    methods = []
    
    # –ú–µ—Ç–æ–¥ 1: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–æ—Ä–æ–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    thr1 = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                cv2.THRESH_BINARY, 25, 15)
    methods.append(thr1)
    
    # –ú–µ—Ç–æ–¥ 2: Otsu thresholding
    _, thr2 = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    methods.append(thr2)
    
    # –ú–µ—Ç–æ–¥ 3: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å –¥—Ä—É–≥–∏–º —è–¥—Ä–æ–º
    thr3 = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
                                cv2.THRESH_BINARY, 21, 12)
    methods.append(thr3)
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —Å –ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –±–µ–ª–æ–≥–æ/—á–µ—Ä–Ω–æ–≥–æ
    best_thr = None
    best_ratio = 0
    for thr in methods:
        white_pixels = np.sum(thr == 255)
        total_pixels = thr.shape[0] * thr.shape[1]
        ratio = white_pixels / total_pixels
        if 0.1 < ratio < 0.9:  # –ò—â–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if abs(ratio - 0.5) < abs(best_ratio - 0.5):
                best_ratio = ratio
                best_thr = thr
    
    if best_thr is None:
        best_thr = methods[0]  # Fallback –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
    # –£–¥–∞–ª—è–µ–º –º–µ–ª–∫–∏–π —à—É–º
    kernel_noise = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
    cleaned = cv2.morphologyEx(best_thr, cv2.MORPH_OPEN, kernel_noise, iterations=2)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑—Ä—ã–≤—ã –≤ —Å–∏–º–≤–æ–ª–∞—Ö
    kernel_close = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 1))
    cleaned = cv2.morphologyEx(cleaned, cv2.MORPH_CLOSE, kernel_close, iterations=1)
    
    # –£–¥–∞–ª—è–µ–º –æ—á–µ–Ω—å –º–µ–ª–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã (—à—É–º)
    num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(255 - cleaned, connectivity=8)
    for i in range(1, num_labels):
        if stats[i, cv2.CC_STAT_AREA] < 50:  # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –º–µ–Ω—å—à–µ 50 –ø–∏–∫—Å–µ–ª–µ–π
            cleaned[labels == i] = 255
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–ª–æ–Ω–∞
    cleaned = deskew_image(cleaned)
    
    return cv_to_pil(cleaned)

def enhance_ocr_with_alternatives(img_pil):
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–ª—É—á—à–µ–Ω–∏—è OCR –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    try:
        # –í low-resource —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ CPU/RAM
        if LOW_RESOURCE:
            return [("original", preprocess_image_for_ocr(img_pil))]

        variants = []
        variants.append(("original", preprocess_image_for_ocr(img_pil)))

        img_cv = pil_to_cv(img_pil)
        if img_cv.ndim == 3:
            gray = cv2.cvtColor(img_cv, cv2.COLOR_BGR2GRAY)
        else:
            gray = img_cv
        inverted = 255 - gray
        variants.append(("inverted", cv_to_pil(inverted)))
        high_contrast = cv2.convertScaleAbs(gray, alpha=2.0, beta=0)
        variants.append(("high_contrast", cv_to_pil(high_contrast)))
        blurred = cv2.GaussianBlur(gray, (3, 3), 0)
        variants.append(("blurred", cv_to_pil(blurred)))
        return variants
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return [("original", img_pil)]

def handle_file_questions(text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∞–π–ª–∞—Ö –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö"""
    text_lower = text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ñ–∞–π–ª–∞—Ö
    file_keywords = ['—Ñ–∞–π–ª', '—Ñ–∞–π–ª—ã', '–æ—Ç–ø—Ä–∞–≤', '–∑–∞–≥—Ä—É', 'pdf', '—Ñ–æ—Ä–º–∞—Ç', '—Ç–∏–ø', '—Ä–∞–∑–º–µ—Ä', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω']
    question_keywords = ['–∫–∞–∫–∏–µ', '—á—Ç–æ', '–º–æ–∂–Ω–æ', '–∫–∞–∫', '–∫–∞–∫–æ–π', '—Å–∫–æ–ª—å–∫–æ', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω', '–ª–∏–º–∏—Ç']
    
    is_file_question = any(keyword in text_lower for keyword in file_keywords)
    is_question = any(keyword in text_lower for keyword in question_keywords)
    
    if is_file_question and is_question:
        return """üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö:**

‚úÖ **–ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** –¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã
üìè **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 20 –ú–ë
‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** 1-4 –º–∏–Ω—É—Ç—ã (–≤—Å–µ PDF —á–µ—Ä–µ–∑ OCR)
üìÑ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:** 
   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
   ‚Ä¢ –í—Å–µ PDF –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ OCR –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

üí° **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"
2. –í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    
    return None

def extract_text_from_pdf(file_bytes, is_ocr_needed=False, progress_callback=None, first_page=None, last_page=None, max_pages_default=10):
    """–ì–∏–±—Ä–∏–¥–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF, OCR —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

    - –í low-resource —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ-—Å—Ç—Ä–∞–Ω–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ —Å–Ω–∏–∂–µ–Ω–Ω—ã–π DPI.
    - –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ—Ä–µ–º –µ–≥–æ –±–µ–∑ OCR.
    - –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ ‚Äî –≤–∫–ª—é—á–∞–µ–º OCR —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    - –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü (first_page/last_page) –∏ –æ–±—â–∏–π –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    try:
        fp = first_page if first_page is not None else 1
        lp = last_page if last_page is not None else max_pages_default
        if lp < fp:
            fp, lp = lp, fp

        try:
            reader = PyPDF2.PdfReader(BytesIO(file_bytes))
            actual_pages = len(reader.pages)
            lp = min(lp, actual_pages)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
            reader = None
            actual_pages = lp - fp + 1

        total_pages = lp - fp + 1
        logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü {fp}-{lp} (–≤—Å–µ–≥–æ {total_pages})")

        collected_text = []
        start_time = time.time()

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        for page_index in range(fp - 1, lp):
            page_num_human = page_index + 1
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ —Ç–∞–π–º–∞—É—Ç–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
                if OCR_TOTAL_TIMEOUT_SEC and (time.time() - start_time) > OCR_TOTAL_TIMEOUT_SEC:
                    logger.warning("‚è∞ –ò—Å—Ç–µ–∫ –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    break
                page_text = ""
                if reader is not None:
                    try:
                        page = reader.pages[page_index]
                        # –í PyPDF2 3.x: extract_text() –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å None
                        native_text = page.extract_text() or ""
                        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —à—É–º: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                        native_text_clean = native_text.strip()
                        if len(native_text_clean) >= OCR_TEXT_THRESHOLD_CHARS:
                            page_text = native_text_clean
                            logger.info(f"üìù p.{page_num_human}: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç ({len(page_text)} —Å–∏–º–≤.)")
                    except Exception as e:
                        logger.debug(f"‚ö†Ô∏è p.{page_num_human}: –æ—à–∏–±–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")

                if not page_text:
                    # OCR —Ç–æ–ª—å–∫–æ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    dpi = OCR_DPI if LOW_RESOURCE else 200
                    try:
                        images = convert_from_bytes(
                            file_bytes,
                            dpi=dpi,
                            first_page=page_num_human,
                            last_page=page_num_human
                        )
                        if images:
                            page_text = process_image_chunk(images, progress_callback)
                            logger.info(f"üîé p.{page_num_human}: OCR ({dpi} DPI) -> {len(page_text)} —Å–∏–º–≤.")
                        else:
                            logger.warning(f"‚ö†Ô∏è p.{page_num_human}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    except Exception as e:
                        logger.error(f"‚ùå p.{page_num_human}: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏/OCR: {e}")

                collected_text.append(page_text)
                if progress_callback:
                    progress_callback(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num_human} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå p.{page_num_human}: –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                collected_text.append("")

        return clean_text("\n".join(collected_text))
    except Exception:
        logger.exception("üí• –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
        raise

def process_image_chunk(images, progress_callback=None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è OCR"""
    if not images:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return ""
    
    ocr_text = ""
    from concurrent.futures import ThreadPoolExecutor, as_completed

    def ocr_single(idx_img):
        i, img = idx_img
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Render (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å)
            if img.width > 2000 or img.height > 2000:
                img.thumbnail((2000, 2000), Image.Resampling.LANCZOS)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π whitelist –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            safe_whitelist = (
                "0123456789"
                "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                "abcdefghijklmnopqrstuvwxyz"
                "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
                "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
                ".,:;!?()\-‚Äì‚Äî_‚Ññ%$‚Ç¨‚ÇΩ¬´¬ª""''"
            )
            
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—É—Ä–µ–∑–∞–µ–º –≤ low-resource)
            if LOW_RESOURCE:
                configs = [
                    f"--psm 6 --oem 3 -c tessedit_char_whitelist={safe_whitelist} -c preserve_interword_spaces=1",
                    f"--psm 4 --oem 3 -c tessedit_char_whitelist={safe_whitelist} -c preserve_interword_spaces=1",
                ]
            else:
                configs = [
                    f"--psm 6 --oem 3 -c tessedit_char_whitelist={safe_whitelist} -c preserve_interword_spaces=1",
                    f"--psm 4 --oem 3 -c tessedit_char_whitelist={safe_whitelist} -c preserve_interword_spaces=1",
                    f"--psm 3 --oem 3 -c tessedit_char_whitelist={safe_whitelist} -c preserve_interword_spaces=1",
                    f"--psm 8 --oem 3 -c tessedit_char_whitelist={safe_whitelist}",
                    "--psm 6 --oem 3 -c preserve_interword_spaces=1",
                    "--psm 4 --oem 3 -c preserve_interword_spaces=1"
                ]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR
            img_variants = enhance_ocr_with_alternatives(img)
            
            text = ""
            best_text = ""
            max_length = 0
            
            # –ü—Ä–æ–±—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            for variant_name, variant_img in img_variants:
                for config in configs:
                    try:
                        result = pytesseract.image_to_string(
                            variant_img,
                            lang='rus+eng',
                            config=config
                        )
                        
                        if result.strip():
                            # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤
                            if len(result.strip()) > max_length:
                                max_length = len(result.strip())
                                best_text = result
                            
                            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                            min_ok = 80 if LOW_RESOURCE else 100
                            if len(result.strip()) > min_ok:
                                text = result
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å {variant_name} –∏ –∫–æ–Ω—Ñ–∏–≥–æ–º {config[:20]}...")
                                break
                                
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OCR —Å {variant_name} –∏ –∫–æ–Ω—Ñ–∏–≥–æ–º {config[:20]}: {e}")
                        continue
                
                if text.strip():  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –∏–∑ –≤—Å–µ—Ö
            if not text.strip() and best_text.strip():
                text = best_text
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ ({max_length} —Å–∏–º–≤–æ–ª–æ–≤)")

            # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ—Ç—Ä–∞–π: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π/–ø–ª–æ—Ö–æ–π ‚Äî –∞–ø—Å–∫–µ–π–ª –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ PSM
            if OCR_ENABLE_RETRY and len((text or "").strip()) < (60 if LOW_RESOURCE else 90):
                try:
                    retry_variants = []
                    # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –ª–∏–±–æ –æ—Ä–∏–≥–∏–Ω–∞–ª
                    base_img = img_variants[0][1] if img_variants else img
                    # –ê–ø—Å–∫–µ–π–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    width, height = base_img.size
                    scaled_w = int(width * OCR_RETRY_SCALE)
                    scaled_h = int(height * OCR_RETRY_SCALE)
                    if max(scaled_w, scaled_h) > OCR_MAX_UPSCALED_DIM:
                        scale_clip = OCR_MAX_UPSCALED_DIM / max(scaled_w, scaled_h)
                        scaled_w = max(1, int(scaled_w * scale_clip))
                        scaled_h = max(1, int(scaled_h * scale_clip))
                    new_size = (scaled_w, scaled_h)
                    upscaled = base_img.resize(new_size, Image.Resampling.LANCZOS)
                    retry_variants.append(("upscaled", upscaled))

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ PSM—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∞–∫–µ—Ç–æ–≤
                    extra_psms = [p.strip() for p in OCR_RETRY_EXTRA_PSMS.split(',') if p.strip()][:OCR_RETRY_MAX_PSMS]
                    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ —Å whitelists
                    retry_configs = []
                    for psm in extra_psms:
                        retry_configs.append(
                            f"--psm {psm} --oem 3 -c preserve_interword_spaces=1"
                        )
                        retry_configs.append(
                            f"--psm {psm} --oem 3 -c tessedit_char_whitelist={safe_whitelist} -c preserve_interword_spaces=1"
                        )

                    best_retry = text
                    best_retry_len = len((text or "").strip())
                    for rname, rimg in retry_variants:
                        for rconfig in retry_configs:
                            try:
                                r = pytesseract.image_to_string(rimg, lang='rus+eng', config=rconfig)
                                rlen = len((r or "").strip())
                                if rlen > best_retry_len:
                                    best_retry = r
                                    best_retry_len = rlen
                                    logger.info(f"üîÅ –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ—Ç—Ä–∞—è {rname} psm={rconfig.split()[1]} ‚Üí {rlen} —Å–∏–º–≤.")
                                # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∏–π —Ç–µ–∫—Å—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
                                if rlen >= (120 if LOW_RESOURCE else 160):
                                    break
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–∞—è OCR: {e}")
                        if best_retry_len >= (120 if LOW_RESOURCE else 160):
                            break
                    if best_retry_len > len((text or "").strip()):
                        text = best_retry
                        logger.info("‚úÖ –†–µ—Ç—Ä–∞–π –¥–∞–ª –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è –†–µ—Ç—Ä–∞–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}: {e}")
            text = ""
        return i, text

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (env-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å)
    max_workers = max(1, min(OCR_MAX_WORKERS, len(images)))
    # –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –±–µ–∑ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    if len(images) == 1:
        i, text = ocr_single((0, images[0]))
        if progress_callback:
            progress_callback(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        ocr_text += text + "\n"
        return clean_text(ocr_text)

    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(ocr_single, (i, img)): i for i, img in enumerate(images)}
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
        from concurrent.futures import TimeoutError
        for fut in as_completed(futures, timeout=OCR_FUTURE_TIMEOUT_SEC * max(1, len(images))):
            try:
                i, text = fut.result(timeout=OCR_FUTURE_TIMEOUT_SEC)
                if progress_callback:
                    progress_callback(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                ocr_text += text + "\n"
            except TimeoutError:
                logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                continue
    logger.info("‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    return clean_text(ocr_text)

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        if not data:
            logger.info("‚ùå –ü—É—Å—Ç–æ–π webhook")
            return "OK", 200

        # Callback-–∫–Ω–æ–ø–∫–∏ (inline)
        if "callback_query" in data:
            cb = data["callback_query"]
            callback_id = cb.get("id")
            from_user = cb.get("from", {})
            chat = cb.get("message", {}).get("chat", {})
            chat_id = chat.get("id")
            action = cb.get("data")
            logger.info(f"üñ±Ô∏è Callback: {action} –æ—Ç {from_user.get('id')} –≤ —á–∞—Ç–µ {chat_id}")

            # –î–µ–¥—É–ø: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ callback'–∏ —Å —Ç–µ–º –∂–µ ID
            if callback_id in processed_callback_ids:
                logger.info(f"üîÅ –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ callback_id={callback_id}")
                return "OK", 200

            if callback_id:
                answer_callback_query(callback_id)
                processed_callback_ids.add(callback_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å conversion_id
            if action and action.startswith("RATE_"):
                try:
                    payload = action.split("_")[1]
                    rating_str, conv_id = payload.split("|")
                    rating = int(rating_str)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å feedback –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    if get_feedback(chat_id, conv_id):
                        send_message(chat_id, "‚ÑπÔ∏è –û—Ü–µ–Ω–∫–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —ç—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                        return "OK", 200
                    if 1 <= rating <= 5:
                        save_feedback(chat_id, conv_id, rating=rating)
                        log_event(chat_id, "feedback", {"rating": rating, "conversion_id": conv_id})
                        send_message(chat_id, "üôè –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ.")
                    else:
                        send_message(chat_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞.")
                except Exception as e:
                    logger.exception("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
                    send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É.")
                return "OK", 200

            # –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ conversion_id
            if action and action.startswith("FB_COMMENT|"):
                try:
                    conv_id = action.split("|")[1]
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å feedback –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã, –Ω–µ –¥–∞—ë–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    if get_feedback(chat_id, conv_id):
                        send_message(chat_id, "‚ÑπÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —ç—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                        return "OK", 200
                    awaiting_comment[chat_id] = conv_id
                    send_message(chat_id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/—á—Ç–æ —É–ª—É—á—à–∏—Ç—å.")
                except Exception as e:
                    logger.exception("üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                    send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
                return "OK", 200

            pending = pending_files.get(chat_id)
            if not pending:
                send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∑–∞–Ω–æ–≤–æ.")
                return "OK", 200

            file_bytes = pending.get("file_bytes")
            base_name = pending.get("file_name", "converted.pdf")
            total_pages = pending.get("num_pages", 0)

            def progress_callback(msg):
                logger.info(f"üìä {msg}")

            if action == "OCR_FIRST_10":
                send_message(chat_id, "üîü –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü...")
                try:
                    text = extract_text_from_pdf(
                        file_bytes,
                        is_ocr_needed=True,
                        progress_callback=progress_callback,
                        first_page=1,
                        last_page=min(10, total_pages)
                    )
                    if not text.strip():
                        send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü.")
                    else:
                        txt_name = os.path.splitext(base_name)[0] + "_p1-" + str(min(10, total_pages)) + ".txt"
                        txt_buffer = BytesIO(text.encode("utf-8"))
                        send_document(chat_id, txt_buffer, txt_name)
                        send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü.")
                except Exception as e:
                    logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ OCR –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü")
                    send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü.")
                finally:
                    # –ù–µ –æ—á–∏—â–∞–µ–º pending_files –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è SPLIT_PDF —Ü–∏–∫–ª–∞
                    set_user_waiting_for_file(chat_id, False)
                return "OK", 200

            if action == "SPLIT_PDF":
                send_message(chat_id, f"‚úÇÔ∏è –ù–∞—á–∏–Ω–∞—é –¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ–≥–æ {total_pages}).")
                part_index = 1
                for start in range(1, total_pages + 1, 10):
                    end = min(start + 9, total_pages)
                    send_message(chat_id, f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start}-{end}...")
                    try:
                        part_text = extract_text_from_pdf(
                            file_bytes,
                            is_ocr_needed=True,
                            progress_callback=progress_callback,
                            first_page=start,
                            last_page=end
                        )
                        if not part_text.strip():
                            send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü {start}-{end}.")
                        else:
                            txt_name = os.path.splitext(base_name)[0] + f"_part{part_index}_p{start}-{end}.txt"
                            txt_buffer = BytesIO(part_text.encode("utf-8"))
                            send_document(chat_id, txt_buffer, txt_name)
                            send_message(chat_id, f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start}-{end} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                    except Exception as e:
                        logger.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü {start}-{end}")
                        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü {start}-{end}.")
                    finally:
                        part_index += 1
                send_message(chat_id, "üéâ –í—Å–µ —á–∞—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª.")
                # –û—á–∏—â–∞–µ–º pending –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
                pending_files.pop(chat_id, None)
                set_user_waiting_for_file(chat_id, False)
                return "OK", 200

            send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return "OK", 200

        if "message" not in data:
            logger.info("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
            return "OK", 200

        message = data["message"]
        message_id = message.get("message_id", "unknown")
        chat_id = message["chat"]["id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ
        message_hash = get_message_hash(message)
        if is_message_processed(message_hash):
            logger.info(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")
            return "OK", 200
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
        mark_message_processed(message_hash)
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")

        if "text" in message:
            text = message["text"]
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ: –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            if chat_id in awaiting_comment:
                conv_id = awaiting_comment.pop(chat_id)
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ–¥–∏–Ω–æ–∂–¥—ã –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    save_feedback(chat_id, conv_id, comment=text)
                    log_event(chat_id, "feedback_comment", {"conversion_id": conv_id})
                    send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
                except Exception as e:
                    logger.exception("üí• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                    send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
                return "OK", 200
            if text == "/start":
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                set_user_waiting_for_file(chat_id, False)
                log_event(chat_id, "start")
                reply_markup = get_main_keyboard()
                send_message(
                    chat_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ —Ç–µ–∫—Å—Ç.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                    reply_markup
                )
            elif text == "/stop":
                set_user_waiting_for_file(chat_id, False)
                send_message(chat_id, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
            elif text == "/statistic":
                if ADMIN_CHAT_ID and str(chat_id) == str(ADMIN_CHAT_ID):
                    try:
                        send_message(chat_id, "‚è≥ –§–æ—Ä–º–∏—Ä—É—é Excel —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞ 30 –¥–Ω–µ–π...")
                        xlsx_buf = generate_excel_stats(last_days=30)
                        send_binary_document(chat_id, xlsx_buf, "bot_stats_last_30_days.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                    except Exception as e:
                        logger.exception("üí• –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è Excel —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                        send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
                else:
                    send_message(chat_id, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            elif text == "/stats":
                if ADMIN_CHAT_ID and str(chat_id) == str(ADMIN_CHAT_ID):
                    try:
                        conn = get_db()
                        cur = conn.cursor()
                        cur.execute("SELECT COUNT(DISTINCT user_id) FROM events")
                        users = cur.fetchone()[0] or 0
                        cur.execute("SELECT COUNT(*) FROM events WHERE event='file_received'")
                        uses = cur.fetchone()[0] or 0
                        cur.execute("SELECT COUNT(*) FROM errors")
                        err_count = cur.fetchone()[0] or 0
                        cur.execute("SELECT error_code, COUNT(*) c FROM errors GROUP BY error_code ORDER BY c DESC LIMIT 5")
                        top_errors = cur.fetchall()
                        cur.execute("SELECT rating, COUNT(*) c FROM feedback GROUP BY rating ORDER BY rating")
                        rating_rows = cur.fetchall()
                        conn.close()
                        ratings = ", ".join([f"{r[0]}‚òÖ: {r[1]}" for r in rating_rows]) if rating_rows else "–Ω–µ—Ç"
                        top_errs = "\n".join([f"- {r[0]}: {r[1]}" for r in top_errors]) if top_errors else "–Ω–µ—Ç"
                        send_message(
                            chat_id,
                            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                            f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users}\n"
                            f"üì• –ó–∞–≥—Ä—É–∑–æ–∫ —Ñ–∞–π–ª–æ–≤: {uses}\n"
                            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {err_count}\n\n"
                            f"–¢–æ–ø –æ—à–∏–±–æ–∫:\n{top_errs}\n\n"
                            f"–û—Ü–µ–Ω–∫–∏: {ratings}"
                        )
                    except Exception as e:
                        logger.exception("üí• –û—à–∏–±–∫–∞ /stats")
                        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
                else:
                    send_message(chat_id, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
            elif text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                set_user_waiting_for_file(chat_id, True)
                log_event(chat_id, "request_upload")
                send_message(
                    chat_id,
                    "üìé –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\nüí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë"
                )
            elif text == "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è":
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
                send_message(chat_id, DESCRIPTION_MESSAGE)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–ø—Ä–æ—Å –æ —Ñ–∞–π–ª–∞—Ö
                file_info = handle_file_questions(text)
                if file_info:
                    send_message(chat_id, file_info)
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, —Å–∫–ª–æ–Ω—è–µ–º –∫ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
                    if not is_user_waiting_for_file(chat_id):
                        send_message(
                            chat_id,
                            "üìé –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å PDF-—Ñ–∞–π–ª–∞–º–∏.\n\n"
                            "üí° **–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:**\n"
                            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é¬ª\n"
                            "2. –í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª\n"
                            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                            "‚ùì **–í–æ–ø—Ä–æ—Å—ã –æ —Ñ–∞–π–ª–∞—Ö?** –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö, —Ä–∞–∑–º–µ—Ä–∞—Ö –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö!"
                        )
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
                        send_message(
                            chat_id,
                            "üìé –Ø –∂–¥—É PDF —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                        )
        elif "document" in message:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            if not is_user_waiting_for_file(chat_id):
                send_message(
                    chat_id,
                    "üìé –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é¬ª, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.\n\n"
                    "üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å!"
                )
                return "OK", 200
            
            doc = message["document"]
            if doc.get("mime_type") != "application/pdf":
                send_message(chat_id, "‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
                return "OK", 200

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = doc.get("file_size", 0)
            if file_size > 50 * 1024 * 1024:  # 50 –ú–ë
                send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë")
                return "OK", 200
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram Bot API –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é ~20 –ú–ë
            if file_size > 20 * 1024 * 1024:
                send_message(
                    chat_id,
                    "‚ùå –≠—Ç–æ—Ç PDF –±–æ–ª—å—à–µ 20 –ú–ë. –ë–æ—Ç—ã Telegram –Ω–µ –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Ñ–∞–π–ª—ã.\n"
                    "üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ PDF, —Ä–∞–∑–±–µ–π—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª."
                )
                return "OK", 200

            if file_size > 10 * 1024 * 1024:  # 10 –ú–ë
                send_message(chat_id, "‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

            send_message(chat_id, "‚è≥ –ü—Ä–∏–Ω—è–ª PDF. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            log_event(chat_id, "file_received", {"size": file_size, "name": doc.get("file_name")})

            try:
                file_id = doc["file_id"]
                logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª ID: {file_id}")
                
                resp = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id={file_id}", timeout=10)
                if not resp.ok:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {resp.status_code} - {resp.text}")
                    send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
                    log_event(chat_id, "ocr_error", {"step": "getFile", "status": resp.status_code})
                    log_error(chat_id, "GET_FILE", resp.text)
                    return "OK", 200
                
                file_path = resp.json()["result"]["file_path"]
                file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
                
                file_resp = requests.get(file_url, timeout=60)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if not file_resp.ok:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {file_resp.status_code}")
                    send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")
                    log_event(chat_id, "ocr_error", {"step": "download", "status": file_resp.status_code})
                    log_error(chat_id, "DOWNLOAD_FILE", file_resp.text)
                    return "OK", 200
                
                file_bytes = file_resp.content
                logger.info(f"üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_bytes)} –±–∞–π—Ç")

                # –í—Å–µ PDF —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ OCR –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                try:
                    reader = PyPDF2.PdfReader(BytesIO(file_bytes))
                    num_pages_detect = len(reader.pages)
                    is_ocr_needed = True  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR
                    logger.info(f"üîç PDF —Ç–∏–ø: —Å–∫–∞–Ω (—Ç—Ä–µ–±—É–µ—Ç OCR) - {num_pages_detect} —Å—Ç—Ä–∞–Ω–∏—Ü")
                    log_event(chat_id, "is_ocr", {"pages": num_pages_detect})
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ PDF: {e}")
                    is_ocr_needed = True
                    log_error(chat_id, "ANALYZE_PDF", repr(e))

                # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–ª—è OCR-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)
                num_pages = 0
                try:
                    reader = PyPDF2.PdfReader(BytesIO(file_bytes))
                    num_pages = len(reader.pages)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")

                if is_ocr_needed and num_pages > 10:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    pending_files[chat_id] = {
                        "file_bytes": file_bytes,
                        "file_name": doc.get("file_name", "converted.pdf"),
                        "num_pages": num_pages,
                        "created_at": time.time()
                    }
                    send_message(
                        chat_id,
                        f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF –Ω–∞ {num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å:",
                        reply_markup=build_split_options_keyboard()
                    )
                    return "OK", 200
                else:
                    if is_ocr_needed:
                        send_message(
                            chat_id,
                            "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é OCR. –≠—Ç–æ –∑–∞–π–º—ë—Ç 1-3 –º–∏–Ω—É—Ç—ã..."
                    )

                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def progress_callback(message):
                    logger.info(f"üìä {message}")

                text = extract_text_from_pdf(
                    file_bytes,
                    is_ocr_needed=is_ocr_needed,
                    progress_callback=progress_callback
                )
                if not text.strip():
                    send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç.")
                    log_event(chat_id, "ocr_error", {"file_name": doc.get("file_name")})
                    log_error(chat_id, "OCR_EMPTY", "no text extracted")
                    return "OK", 200

                base_name = doc.get("file_name", "converted")
                txt_name = os.path.splitext(base_name)[0] + ".txt"
                txt_buffer = BytesIO(text.encode("utf-8"))
                send_document(chat_id, txt_buffer, txt_name)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º conversion_id: message_id + timestamp
                conversion_id = f"{message_id}_{int(time.time())}"
                log_event(chat_id, "ocr_success", {"file_name": base_name, "conversion_id": conversion_id})
                send_message(
                    chat_id,
                    "üìù –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (1 ‚Äî –ø–ª–æ—Ö–æ, 5 ‚Äî –æ—Ç–ª–∏—á–Ω–æ):",
                    reply_markup=build_rating_keyboard(conversion_id)
                )

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                set_user_waiting_for_file(chat_id, False)

                reply_markup = get_main_keyboard()
                send_message(
                    chat_id,
                    "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π PDF!",
                    reply_markup
                )

            except Exception as e:
                logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF")
                set_user_waiting_for_file(chat_id, False)
                send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                log_event(chat_id, "ocr_error", {"file_name": message.get('document', {}).get('file_name')})
                log_error(chat_id, "OCR_EXCEPTION", repr(e))

    except Exception as e:
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ webhook")
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
        return "OK", 200

    return "OK", 200

def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        webhook_url = WEBHOOK_URL.rstrip("/") + "/webhook"
        resp = requests.post(url, json={"url": webhook_url}, timeout=10)
        if resp.ok:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    init_db()
    set_webhook()

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)