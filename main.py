import os
import sys
import logging
import json
import time
import hashlib
import re
from datetime import datetime
import sqlite3
import requests
from flask import Flask, request

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
DB_PATH = os.getenv("DB_PATH", "bot.db")

# Better error handling for missing environment variables
def check_env_vars():
    missing_vars = []
    if not BOT_TOKEN:
        missing_vars.append("BOT_TOKEN")
    if not WEBHOOK_URL:
        missing_vars.append("WEBHOOK_URL")
    
    if missing_vars:
        logger.critical(f"‚ùå Missing required environment variables: {', '.join(missing_vars)}")
        logger.critical("Please set the following environment variables in your Render dashboard:")
        logger.critical("1. BOT_TOKEN - Get from @BotFather on Telegram")
        logger.critical("2. WEBHOOK_URL - Your Render app URL + /webhook (e.g., https://your-app.onrender.com/webhook)")
    sys.exit(1)

    logger.info("‚úÖ Environment variables loaded successfully")

check_env_vars()

app = Flask(__name__)

# Dedup caches
processed_messages = set()
processed_callback_ids = set()

# --- Database helpers ---
def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    try:
        conn = get_db()
        cur = conn.cursor()
        # users
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                username TEXT,
                gender TEXT,
                created_at TEXT NOT NULL
            )
            """
        )
        # cooking sessions
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS cooking_sessions (
                user_id TEXT PRIMARY KEY,
                stage TEXT NOT NULL,
                data_json TEXT,
                updated_at TEXT NOT NULL
            )
            """
        )
        conn.commit()
        conn.close()
    except Exception:
        logger.exception("üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î")

def upsert_user(user_id, username, gender=None):
    try:
        conn = get_db()
        cur = conn.cursor()
        if gender:
            cur.execute(
                "INSERT OR REPLACE INTO users (user_id, username, gender, created_at) VALUES (?, ?, ?, ?)",
                (str(user_id), username, gender, datetime.utcnow().isoformat())
            )
        else:
            cur.execute(
                "INSERT OR IGNORE INTO users (user_id, username, created_at) VALUES (?, ?, ?)",
                (str(user_id), username, datetime.utcnow().isoformat())
            )
        conn.commit()
        conn.close()
    except Exception:
        logger.exception("üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

def get_user(user_id):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT username, gender FROM users WHERE user_id=?", (str(user_id),))
    row = cur.fetchone()
    conn.close()
    return dict(row) if row else None

def get_session(user_id):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT stage, data_json FROM cooking_sessions WHERE user_id=?", (str(user_id),))
    row = cur.fetchone()
    conn.close()
    if not row:
        return None
    stage, data_json = row
    return {"stage": stage, "data": json.loads(data_json) if data_json else {}}

def save_session(user_id, stage, data):
    conn = get_db()
    cur = conn.cursor()
    cur.execute(
        "REPLACE INTO cooking_sessions (user_id, stage, data_json, updated_at) VALUES (?, ?, ?, ?)",
        (str(user_id), stage, json.dumps(data, ensure_ascii=False), datetime.utcnow().isoformat())
    )
    conn.commit()
    conn.close()

# --- UI helpers ---
def send_message(chat_id, text, reply_markup=None):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {"chat_id": chat_id, "text": text}
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {text[:50]}...")
        response = requests.post(url, json=data, timeout=10)
        
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def answer_callback_query(callback_query_id, text=None):
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
        data = {"callback_query_id": callback_query_id}
        if text:
            data["text"] = text
        requests.post(url, data=data, timeout=10)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ answerCallbackQuery")

def get_message_hash(message):
    s = str(message.get('message_id', '')) + str(message.get('date', ''))
    return hashlib.md5(s.encode()).hexdigest()

def build_inline_keyboard(options_with_payload):
    # options_with_payload: [(text, payload), ...]
    row = [{"text": t, "callback_data": p} for t, p in options_with_payload]
    return {"inline_keyboard": [row]}

# --- Bati personality ---
def get_gender_pronoun(gender):
    if gender == "male":
        return {"you": "—Å—ã–Ω–æ–∫", "your": "—Ç–≤–æ–π", "you_have": "—É —Ç–µ–±—è", "you_are": "—Ç—ã", "address": "—Å—ã–Ω–æ–∫"}
    elif gender == "female":
        return {"you": "–¥–æ—á–∫–∞", "your": "—Ç–≤–æ—è", "you_have": "—É —Ç–µ–±—è", "you_are": "—Ç—ã", "address": "–¥–æ—á–∫–∞"}
    else:
        return {"you": "–¥–µ—Ç–∫–∞", "your": "—Ç–≤–æ–π", "you_have": "—É —Ç–µ–±—è", "you_are": "—Ç—ã", "address": "–¥–µ—Ç–∫–∞"}

def detect_gender_by_name(name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)"""
    name = name.lower().strip()
    
    # –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
    male_names = [
        '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–∞–ª–µ–∫—Å–µ–π', '–∞–Ω–¥—Ä–µ–π', '–∞–Ω—Ç–æ–Ω', '–∞—Ä—Ç–µ–º', '–±–æ—Ä–∏—Å', '–≤–∞–¥–∏–º', '–≤–∞–ª–µ–Ω—Ç–∏–Ω', '–≤–∞–ª–µ—Ä–∏–π', '–≤–∞—Å–∏–ª–∏–π',
        '–≤–∏–∫—Ç–æ—Ä', '–≤–ª–∞–¥–∏–º–∏—Ä', '–≤–ª–∞–¥–∏—Å–ª–∞–≤', '–≤–ª–∞–¥–∏–ª–µ–Ω', '–≥–µ–Ω–Ω–∞–¥–∏–π', '–≥–µ–æ—Ä–≥–∏–π', '–≥—Ä–∏–≥–æ—Ä–∏–π', '–¥–º–∏—Ç—Ä–∏–π', '–µ–≤–≥–µ–Ω–∏–π',
        '–µ–≥–æ—Ä', '–∏–≤–∞–Ω', '–∏–≥–æ—Ä—å', '–∫–∏—Ä–∏–ª–ª', '–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–º–∞–∫—Å–∏–º', '–º–∏—Ö–∞–∏–ª', '–Ω–∏–∫–æ–ª–∞–π', '–æ–ª–µ–≥', '–ø–∞–≤–µ–ª',
        '–ø–µ—Ç—Ä', '—Ä–æ–º–∞–Ω', '—Å–µ—Ä–≥–µ–π', '—Å—Ç–∞–Ω–∏—Å–ª–∞–≤', '—Å—Ç–µ–ø–∞–Ω', '—Ñ–µ–¥–æ—Ä', '—é—Ä–∏–π', '—è—Ä–æ—Å–ª–∞–≤', '–¥–µ–Ω–∏—Å', '–∏–ª—å—è',
        '–∞—Ä—Ç—É—Ä', '—ç–¥—É–∞—Ä–¥', '–ª–µ–æ–Ω–∏–¥', '–º–∏—Ä–æ–Ω', '–º–∞—Ä–∫', '—Ç–∏–º–æ—Ñ–µ–π', '–º–∞—Ç–≤–µ–π', '–¥–∞–Ω–∏–∏–ª', '–∑–∞—Ö–∞—Ä', '—Å–µ–º–µ–Ω',
        '—Å–∞—à–∞', '–ª–µ—à–∞', '–∞–Ω–¥—Ä—é—Ö–∞', '–¥–∏–º–∞', '–º–∏—à–∞', '–∫–æ–ª—è', '–ø–∞—à–∞', '—Ä–æ–º–∞', '—Å–µ—Ä—ã–π', '–≤–∞–Ω—è', '–∏–≥–æ—Ä—å',
        '–∂–æ—Ä–∞', '–≥–æ—à–∞', '–≤–∞—Å—è', '–ø–µ—Ç—è', '—Ñ–µ–¥—è', '—é—Ä–∞', '–ª–µ—à–∞', '–ª–µ—Ö–∞', '—Å–∞–Ω—è', '—Å–∞–Ω—ë–∫'
    ]
    
    # –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
    female_names = [
        '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–∞–ª–µ–Ω–∞', '–∞–Ω–∞—Å—Ç–∞—Å–∏—è', '–∞–Ω–Ω–∞', '–≤–∞–ª–µ–Ω—Ç–∏–Ω–∞', '–≤–∞–ª–µ—Ä–∏—è', '–≤–µ—Ä–∞', '–≥–∞–ª–∏–Ω–∞', '–¥–∞—Ä—å—è', '–µ–ª–µ–Ω–∞',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–µ–ª–µ–Ω–∞', '–∂–∞–Ω–Ω–∞', '–∑–æ—è', '–∏—Ä–∏–Ω–∞', '–∫—Ä–∏—Å—Ç–∏–Ω–∞', '–ª–∞—Ä–∏—Å–∞', '–ª—é–¥–º–∏–ª–∞', '–º–∞—Ä–∏—è', '–Ω–∞–¥–µ–∂–¥–∞',
        '–Ω–∞—Ç–∞–ª—å—è', '–æ–∫—Å–∞–Ω–∞', '–æ–ª—å–≥–∞', '–ø–æ–ª–∏–Ω–∞', '—Å–≤–µ—Ç–ª–∞–Ω–∞', '—Å–æ—Ñ—å—è', '—Ç–∞—Ç—å—è–Ω–∞', '—é–ª–∏—è', '—è–Ω–∞', '–≤–∏–∫—Ç–æ—Ä–∏—è',
        '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–º–∞—Ä–∏–Ω–∞', '–Ω–∞—Ç–∞—à–∞', '–∫–∞—Ç—è', '–ª–µ–Ω–∞', '–æ–ª—è', '—Ç–∞–Ω—è', '—Å–≤–µ—Ç–∞', '–∏—Ä–∞', '–≥–∞–ª—è', '–≤–∞–ª—è',
        '–ª—é–¥–∞', '–Ω–∞–¥—è', '–∑–æ—è', '–≤–µ—Ä–∞', '–∂–∞–Ω–Ω–∞', '–∫—Ä–∏—Å—Ç–∏–Ω–∞', '–¥–∞—à–∞', '–ø–æ–ª–∏–Ω–∞', '—Å–æ—Ñ—å—è', '—è–Ω–∞', '–≤–∏–∫–∞',
        '–º–∞—à–∞', '–Ω–∞—Å—Ç—è', '–∫–∞—Ç—è', '–∫–∞—Ç—é—à–∞', '–ª–µ–Ω–∫–∞', '–æ–ª–µ–Ω—å–∫–∞', '—Ç–∞–Ω–µ—á–∫–∞', '—Å–≤–µ—Ç–∫–∞', '–∏—Ä–æ—á–∫–∞', '–≥–∞–ª–æ—á–∫–∞'
    ]
    
    if name in male_names:
        return "male"
    elif name in female_names:
        return "female"
    else:
        return "unknown"

def detect_gender_correction(text):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ø—Ä–∞–≤–∫—É –ø–æ–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text = text.lower()
    
    male_corrections = ['–º–∞–ª—å—á–∏–∫', '–º—É–∂—á–∏–Ω–∞', '—é–Ω–æ—à–∞', '–ø–∞—Ü–∞–Ω', '—Å—ã–Ω', '—Å—ã–Ω–æ–∫', '—è –º–∞–ª—å—á–∏–∫', '—è –º—É–∂—á–∏–Ω–∞', '—è –ø–∞—Ä–µ–Ω—å']
    female_corrections = ['–¥–µ–≤–æ—á–∫–∞', '–¥–µ–≤—É—à–∫–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–≤—á–æ–Ω–∫–∞', '–¥–æ—á—å', '–¥–æ—á–∫–∞', '—è –¥–µ–≤–æ—á–∫–∞', '—è –¥–µ–≤—É—à–∫–∞', '—è –∂–µ–Ω—â–∏–Ω–∞']
    
    for correction in male_corrections:
        if correction in text:
            return "male"
    
    for correction in female_corrections:
        if correction in text:
            return "female"
    
    return None

def bati_name_ask():
    """–ë–∞—Ç—é —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è"""
    greetings = [
        "–ë–ª—è—Ç—å, –∫—Ç–æ —ç—Ç–æ —Ç—É—Ç —É –º–µ–Ω—è? –ù–∞–∑–æ–≤–∏ —Å–≤–æ–µ –∏–º—è, –∞ —Ç–æ —è –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è! üò§",
        "–°–ª—É—à–∞–π, –¥–µ—Ç–∫–∞, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –Ø –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å, —Å –∫–µ–º –∏–º–µ—é –¥–µ–ª–æ –Ω–∞ –∫—É—Ö–Ω–µ! üë®‚Äçüç≥",
        "–ù—É —á—Ç–æ, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è! –ö–∞–∫ —Ç–µ–±—è —Ä–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞–∑–≤–∞–ª–∏? ü§î",
        "–ë–ª—è—Ç—å, –¥–∞ –∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–π? –ò–º—è —Å–∫–∞–∂–∏, –∞ —Ç–æ —è –Ω–µ –±—É–¥—É —Å –∞–Ω–æ–Ω–∏–º–æ–º –≥–æ—Ç–æ–≤–∏—Ç—å! üò†"
    ]
    return greetings[0]

def bati_greeting(name, gender):
    pronouns = get_gender_pronoun(gender)
    greetings = [
        f"–ê, {name}! –ù—É —á—Ç–æ, {pronouns['address']}, –≥–æ—Ç–æ–≤(–∞) –∫ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–¥–≤–∏–≥–∞–º? –Ø —Ç–µ–±–µ —Å–µ–π—á–∞—Å —Ç–∞–∫–æ–µ –±–ª—é–¥–æ –ø–æ–∫–∞–∂—É, —á—Ç–æ –µ–±–∞—Ç—å! üî•",
        f"–¢–∞–∫, {name}, {pronouns['address']} –º–æ–π! –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É, –∫–∞–∫ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ! üë®‚Äçüç≥",
        f"–°–ª—É—à–∞–π, {name}, {pronouns['address']}, —è —Ç–µ–±–µ —Å–µ–π—á–∞—Å —Ç–∞–∫–æ–µ –±–ª—é–¥–æ –ø–æ–∫–∞–∂—É, —á—Ç–æ –ø–∞–ª—å—á–∏–∫–∏ –æ–±–ª–∏–∂–µ—à—å! –ï–±–∞—Ç—å, –∫–∞–∫–∞—è –≤–∫—É—Å–Ω—è—Ç–∏–Ω–∞ –±—É–¥–µ—Ç! üòã",
        f"–ù—É —á—Ç–æ, {name}, {pronouns['address']}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –∫—É—Ö–Ω—é! –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º —Ç–≤–æ—Ä–∏—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —à–µ–¥–µ–≤—Ä—ã! üç≥"
    ]
    return greetings[0]

def bati_gender_correction(name, old_gender, new_gender):
    """–ë–∞—Ç—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–ª"""
    old_pronouns = get_gender_pronoun(old_gender)
    new_pronouns = get_gender_pronoun(new_gender)
    
    corrections = [
        f"–ê, –±–ª—è—Ç—å, {name}! –ò–∑–≤–∏–Ω–∏, {old_pronouns['address']}, —è –¥—É–º–∞–ª —Ç—ã {old_pronouns['address']}, –∞ —Ç—ã {new_pronouns['address']}! –ù—É –ª–∞–¥–Ω–æ, {new_pronouns['address']}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üòÖ",
        f"–ï–±–∞—Ç—å, {name}, —è –æ—à–∏–±—Å—è! –¢—ã –∂–µ {new_pronouns['address']}, –∞ –Ω–µ {old_pronouns['address']}! –ù—É –ª–∞–¥–Ω–æ, {new_pronouns['address']}, –¥–∞–≤–∞–π –≥–æ—Ç–æ–≤–∏—Ç—å! ü§¶‚Äç‚ôÇÔ∏è",
        f"–°–ª—É—à–∞–π, {name}, —è –ø–µ—Ä–µ–ø—É—Ç–∞–ª! –¢—ã {new_pronouns['address']}, –∞ —è —Ç–µ–±—è {old_pronouns['address']} –Ω–∞–∑—ã–≤–∞–ª! –ò–∑–≤–∏–Ω–∏, {new_pronouns['address']}! üòÖ",
        f"–ë–ª—è—Ç—å, {name}, —è –æ–±–ª–∞–∂–∞–ª—Å—è! –¢—ã {new_pronouns['address']}, –∞ –Ω–µ {old_pronouns['address']}! –ù—É –ª–∞–¥–Ω–æ, {new_pronouns['address']}, –ø–æ–µ—Ö–∞–ª–∏ –¥–∞–ª—å—à–µ! ü§∑‚Äç‚ôÇÔ∏è"
    ]
    return corrections[0]

def bati_ingredients_ask(name, gender):
    pronouns = get_gender_pronoun(gender)
    return f"–°–ª—É—à–∞–π, {name}, {pronouns['address']}, —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á–µ—Å—Ç–Ω–æ - —á—Ç–æ —É —Ç–µ–±—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –ª–µ–∂–∏—Ç? –ò –≤ —à–∫–∞—Ñ—á–∏–∫–∞—Ö —Ç–æ–∂–µ –ø–æ—Å–º–æ—Ç—Ä–∏! –ù–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–∞–∫–∏–µ –µ—Å—Ç—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–∫–æ–º. –Ø –∏–∑ —ç—Ç–æ–≥–æ –¥–æ–±—Ä–∞ —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ —Å–æ—Å—Ç—Ä—è–ø–∞—é! –ï–±–∞—Ç—å, –∫–∞–∫–∞—è –≤–∫—É—Å–Ω—è—Ç–∏–Ω–∞ –ø–æ–ª—É—á–∏—Ç—Å—è! ü•ò"

def bati_recipe_intro(name, gender, recipe_name):
    pronouns = get_gender_pronoun(gender)
    intros = [
        f"–û—Ç–ª–∏—á–Ω–æ, {name}, {pronouns['address']}! –Ø –¥–ª—è —Ç–µ–±—è –≤—ã–±—Ä–∞–ª —Ä–µ—Ü–µ–ø—Ç '{recipe_name}'. –≠—Ç–æ –∫–ª–∞—Å—Å–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –≤—Ä–µ–º–µ–Ω–µ–º! –ï–±–∞—Ç—å, –∫–∞–∫–∞—è –≤–∫—É—Å–Ω—è—Ç–∏–Ω–∞ –±—É–¥–µ—Ç! üë®‚Äçüç≥",
        f"–°–ª—É—à–∞–π, {name}, {pronouns['address']}, '{recipe_name}' - —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ! –Ø —Å–∞–º —Ç–∞–∫ –≥–æ—Ç–æ–≤–∏–ª –µ—â–µ –≤ –º–æ–ª–æ–¥–æ—Å—Ç–∏! –ë–ª—è—Ç—å, –∫–∞–∫ –∂–µ —ç—Ç–æ –≤–∫—É—Å–Ω–æ! üî•",
        f"–ù—É —á—Ç–æ, {name}, {pronouns['address']}, –≥–æ—Ç–æ–≤–∏–º '{recipe_name}'? –≠—Ç–æ –±–ª—é–¥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–¥–≤–æ–¥–∏–ª–æ! –ï–±–∞—Ç—å, –ø–∞–ª—å—á–∏–∫–∏ –æ–±–ª–∏–∂–µ—à—å! üòã"
    ]
    return intros[0]

def bati_cooking_step(step_num, instruction, name, gender):
    pronouns = get_gender_pronoun(gender)
    step_intros = [
        f"–®–∞–≥ {step_num}, {name}, {pronouns['address']}:",
        f"–°–ª—É—à–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, {name}, {pronouns['address']}, —à–∞–≥ {step_num}:",
        f"–¢–µ–ø–µ—Ä—å, {name}, {pronouns['address']}, –¥–µ–ª–∞–µ–º —Ç–∞–∫ - —à–∞–≥ {step_num}:",
        f"–ó–∞–ø–æ–º–∏–Ω–∞–π, {name}, {pronouns['address']}, —à–∞–≥ {step_num}:"
    ]
    return f"{step_intros[0]} {instruction}"

def bati_encouragement(name, gender):
    pronouns = get_gender_pronoun(gender)
    encouragements = [
        f"–ú–æ–ª–æ–¥–µ—Ü, {name}, {pronouns['address']}! –£ —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è! –ï–±–∞—Ç—å, –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ä—É–∫–∏ –∑–æ–ª–æ—Ç—ã–µ! üëç",
        f"–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, {name}, {pronouns['address']}! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ–≤–∞—Ä! –ë–ª—è—Ç—å, –∫–∞–∫ –∂–µ —Ç—ã –±—ã—Å—Ç—Ä–æ —É—á–∏—à—å—Å—è! üë®‚Äçüç≥",
        f"–û—Ç–ª–∏—á–Ω–æ, {name}, {pronouns['address']}! –í–∏–∂—É, —á—Ç–æ —Ä—É–∫–∏ —Ä–∞—Å—Ç—É—Ç –æ—Ç–∫—É–¥–∞ –Ω–∞–¥–æ! –ï–±–∞—Ç—å, –∫–∞–∫–æ–π —Ç—ã –º–æ–ª–æ–¥–µ—Ü! üî•",
        f"–ö—Ä–∞—Å–æ—Ç–∞, {name}, {pronouns['address']}! –£—á–∏—à—å—Å—è –±—ã—Å—Ç—Ä–æ! –ë–ª—è—Ç—å, —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–∞—Ä –æ—Ç –±–æ–≥–∞! üòã"
    ]
    return encouragements[0]

def bati_no_ingredients(name, gender):
    pronouns = get_gender_pronoun(gender)
    return f"–ë–ª—è—Ç—å, {name}, {pronouns['address']}, —Å —Ç–∞–∫–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –æ—Å–æ–±–æ –Ω–µ —Ä–∞–∑–≥—É–ª—è–µ—à—å—Å—è... –ú–æ–∂–µ—Ç, —Å—Ö–æ–¥–∏—à—å –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ –º—è—Å–æ–º –∏–ª–∏ –æ–≤–æ—â–∞–º–∏? –ò–ª–∏ –∑–∞–∫–∞–∂–µ—à—å –¥–æ—Å—Ç–∞–≤–∫—É? –ê —Ç–æ –∏–∑ –≤–æ–∑–¥—É—Ö–∞ –µ–¥—É –Ω–µ —Å–¥–µ–ª–∞–µ—à—å! üõí"

def bati_recipe_found(name, gender, count):
    pronouns = get_gender_pronoun(gender)
    return f"–ï–±–∞—Ç—å, {name}, {pronouns['address']}! –ò–∑ —Ç–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —è –º–æ–≥—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å {count} –±–ª—é–¥! –°–º–æ—Ç—Ä–∏, —á—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å:"

# --- Recipe database ---
RECIPES = {
    "–ø–∞—Å—Ç–∞_–∫–∞—Ä–±–æ–Ω–∞—Ä–∞": {
        "name": "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞",
        "ingredients": ["–º–∞–∫–∞—Ä–æ–Ω—ã", "–±–µ–∫–æ–Ω", "—è–π—Ü–∞", "—Å—ã—Ä_–ø–∞—Ä–º–µ–∑–∞–Ω", "—á–µ—Å–Ω–æ–∫", "—Å–æ–ª—å", "–ø–µ—Ä–µ—Ü"],
        "optional": ["–ª—É–∫"],
        "instructions": [
            "–ü–æ—Å—Ç–∞–≤—å –±–æ–ª—å—à—É—é –∫–∞—Å—Ç—Ä—é–ª—é —Å –ø–æ–¥—Å–æ–ª–µ–Ω–Ω–æ–π –≤–æ–¥–æ–π –Ω–∞ –æ–≥–æ–Ω—å",
            "–ü–æ–∫–∞ –≤–æ–¥–∞ –∑–∞–∫–∏–ø–∞–µ—Ç, –Ω–∞—Ä–µ–∂—å –±–µ–∫–æ–Ω –º–µ–ª–∫–∏–º–∏ –∫—É–±–∏–∫–∞–º–∏",
            "–ù–∞—Ç—Ä–∏ —Å—ã—Ä –Ω–∞ –º–µ–ª–∫–æ–π —Ç–µ—Ä–∫–µ",
            "–í–∑–±–µ–π —è–π—Ü–∞ —Å —Å—ã—Ä–æ–º, –¥–æ–±–∞–≤—å —Å–æ–ª—å –∏ –ø–µ—Ä–µ—Ü",
            "–û–±–∂–∞—Ä—å –±–µ–∫–æ–Ω –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ –¥–æ —Ö—Ä—É—Å—Ç—è—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            "–î–æ–±–∞–≤—å –∏–∑–º–µ–ª—å—á–µ–Ω–Ω—ã–π —á–µ—Å–Ω–æ–∫ –∫ –±–µ–∫–æ–Ω—É",
            "–û—Ç–≤–∞—Ä–∏ –º–∞–∫–∞—Ä–æ–Ω—ã –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª—å –¥–µ–Ω—Ç–µ",
            "–°–ª–µ–π –≤–æ–¥—É, –æ—Å—Ç–∞–≤–∏–≤ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–æ—É—Å–∞",
            "–°–º–µ—à–∞–π –≥–æ—Ä—è—á–∏–µ –º–∞–∫–∞—Ä–æ–Ω—ã —Å –±–µ–∫–æ–Ω–æ–º",
            "–°–Ω–∏–º–∏ —Å –æ–≥–Ω—è –∏ –¥–æ–±–∞–≤—å —è–∏—á–Ω–æ-—Å—ã—Ä–Ω—É—é —Å–º–µ—Å—å, –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—è",
            "–ü–æ–¥–∞–≤–∞–π —Å—Ä–∞–∑—É, –ø–æ—Å—ã–ø–∞–≤ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º"
        ]
    },
    "–±–æ—Ä—â": {
        "name": "–ë–æ—Ä—â",
        "ingredients": ["–≥–æ–≤—è–¥–∏–Ω–∞", "—Å–≤–µ–∫–ª–∞", "–∫–∞–ø—É—Å—Ç–∞", "–º–æ—Ä–∫–æ–≤—å", "–ª—É–∫", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å", "—Ç–æ–º–∞—Ç—ã", "—á–µ—Å–Ω–æ–∫", "—Å–æ–ª—å", "–ø–µ—Ä–µ—Ü", "–ª–∞–≤—Ä–æ–≤—ã–π_–ª–∏—Å—Ç"],
        "optional": ["—É–∫—Ä–æ–ø", "—Å–º–µ—Ç–∞–Ω–∞"],
        "instructions": [
            "–°–≤–∞—Ä–∏ –º—è—Å–Ω–æ–π –±—É–ª—å–æ–Ω –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã",
            "–ù–∞—Ç—Ä–∏ —Å–≤–µ–∫–ª—É –Ω–∞ –∫—Ä—É–ø–Ω–æ–π —Ç–µ—Ä–∫–µ",
            "–ù–∞—Ä–µ–∂—å –∫–∞–ø—É—Å—Ç—É —Å–æ–ª–æ–º–∫–æ–π",
            "–ù–∞—Ä–µ–∂—å –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –∫—É–±–∏–∫–∞–º–∏",
            "–ù–∞—Ä–µ–∂—å –ª—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å",
            "–û–±–∂–∞—Ä—å –ª—É–∫ –∏ –º–æ—Ä–∫–æ–≤—å –Ω–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–º –º–∞—Å–ª–µ",
            "–î–æ–±–∞–≤—å –∫ –Ω–∏–º —Å–≤–µ–∫–ª—É –∏ —Ç–æ–º–∞—Ç—ã, —Ç—É—à–∏ 10 –º–∏–Ω—É—Ç",
            "–î–æ–±–∞–≤—å –æ–≤–æ—â–∏ –≤ –∫–∏–ø—è—â–∏–π –±—É–ª—å–æ–Ω",
            "–í–∞—Ä–∏ 20 –º–∏–Ω—É—Ç, –¥–æ–±–∞–≤—å –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å",
            "–í–∞—Ä–∏ –µ—â–µ 15 –º–∏–Ω—É—Ç, –¥–æ–±–∞–≤—å –∫–∞–ø—É—Å—Ç—É",
            "–î–æ–±–∞–≤—å —Å–æ–ª—å, –ø–µ—Ä–µ—Ü, –ª–∞–≤—Ä–æ–≤—ã–π –ª–∏—Å—Ç",
            "–í–∞—Ä–∏ –µ—â–µ 10 –º–∏–Ω—É—Ç, –¥–æ–±–∞–≤—å —á–µ—Å–Ω–æ–∫",
            "–ü–æ–¥–∞–≤–∞–π —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π –∏ —É–∫—Ä–æ–ø–æ–º"
        ]
    },
    "–ø–ª–æ–≤": {
        "name": "–ü–ª–æ–≤",
        "ingredients": ["—Ä–∏—Å", "–º—è—Å–æ", "–º–æ—Ä–∫–æ–≤—å", "–ª—É–∫", "—á–µ—Å–Ω–æ–∫", "—Å–æ–ª—å", "–ø–µ—Ä–µ—Ü", "–∫—É—Ä–∫—É–º–∞", "—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ_–º–∞—Å–ª–æ"],
        "optional": ["–±–∞—Ä–±–∞—Ä–∏—Å", "–∑–∏—Ä–∞"],
        "instructions": [
            "–ü—Ä–æ–º–æ–π —Ä–∏—Å –¥–æ —á–∏—Å—Ç–æ–π –≤–æ–¥—ã",
            "–ù–∞—Ä–µ–∂—å –º—è—Å–æ –∫—É–±–∏–∫–∞–º–∏",
            "–ù–∞—Ä–µ–∂—å –ª—É–∫ –ø–æ–ª—É–∫–æ–ª—å—Ü–∞–º–∏, –º–æ—Ä–∫–æ–≤—å —Å–æ–ª–æ–º–∫–æ–π",
            "–†–∞–∑–æ–≥—Ä–µ–π –º–∞—Å–ª–æ –≤ –∫–∞–∑–∞–Ω–µ –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ—Å—Ç–µ–Ω–Ω–æ–π –∫–∞—Å—Ç—Ä—é–ª–µ",
            "–û–±–∂–∞—Ä—å –º—è—Å–æ –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–π –∫–æ—Ä–æ—á–∫–∏",
            "–î–æ–±–∞–≤—å –ª—É–∫, –æ–±–∂–∞—Ä—å –¥–æ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏",
            "–î–æ–±–∞–≤—å –º–æ—Ä–∫–æ–≤—å, –æ–±–∂–∞—Ä—å 5 –º–∏–Ω—É—Ç",
            "–î–æ–±–∞–≤—å —Å–ø–µ—Ü–∏–∏ –∏ —Å–æ–ª—å",
            "–î–æ–±–∞–≤—å —Ä–∏—Å, —Ä–∞–∑—Ä–æ–≤–Ω—è–π",
            "–ó–∞–ª–µ–π –≥–æ—Ä—è—á–µ–π –≤–æ–¥–æ–π –Ω–∞ 2 —Å–º –≤—ã—à–µ —Ä–∏—Å–∞",
            "–î–æ–±–∞–≤—å —Ü–µ–ª—ã–µ –∑—É–±—á–∏–∫–∏ —á–µ—Å–Ω–æ–∫–∞",
            "–í–∞—Ä–∏ –Ω–∞ —Å–∏–ª—å–Ω–æ–º –æ–≥–Ω–µ –¥–æ –≤—ã–ø–∞—Ä–∏–≤–∞–Ω–∏—è –≤–æ–¥—ã",
            "–£–º–µ–Ω—å—à–∏ –æ–≥–æ–Ω—å, –Ω–∞–∫—Ä–æ–π –∫—Ä—ã—à–∫–æ–π, —Ç–æ–º–∏ 20 –º–∏–Ω—É—Ç",
            "–ü–µ—Ä–µ–º–µ—à–∞–π –∏ –ø–æ–¥–∞–≤–∞–π"
        ]
    },
    "—Å–∞–ª–∞—Ç_—Ü–µ–∑–∞—Ä—å": {
        "name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å",
        "ingredients": ["—Å–∞–ª–∞—Ç", "–∫—É—Ä–∏—Ü–∞", "—Å—ã—Ä_–ø–∞—Ä–º–µ–∑–∞–Ω", "—Ö–ª–µ–±", "—á–µ—Å–Ω–æ–∫", "–º–∞–π–æ–Ω–µ–∑", "–≥–æ—Ä—á–∏—Ü–∞", "—Å–æ–ª—å", "–ø–µ—Ä–µ—Ü"],
        "optional": ["–∞–Ω—á–æ—É—Å—ã", "–∫–∞–ø–µ—Ä—Å—ã"],
        "instructions": [
            "–ù–∞—Ä–µ–∂—å —Ö–ª–µ–± –∫—É–±–∏–∫–∞–º–∏ –∏ –æ–±–∂–∞—Ä—å —Å —á–µ—Å–Ω–æ–∫–æ–º",
            "–û—Ç–≤–∞—Ä–∏ –∫—É—Ä–∏—Ü—É –∏ –Ω–∞—Ä–µ–∂—å –∫—É–±–∏–∫–∞–º–∏",
            "–ü–æ—Ä–≤–∏ —Å–∞–ª–∞—Ç —Ä—É–∫–∞–º–∏",
            "–°–º–µ—à–∞–π –º–∞–π–æ–Ω–µ–∑ —Å –≥–æ—Ä—á–∏—Ü–µ–π –∏ —á–µ—Å–Ω–æ–∫–æ–º",
            "–î–æ–±–∞–≤—å —Å–æ–ª—å –∏ –ø–µ—Ä–µ—Ü –≤ —Å–æ—É—Å",
            "–°–º–µ—à–∞–π —Å–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π",
            "–ó–∞–ø—Ä–∞–≤—å —Å–æ—É—Å–æ–º",
            "–ü–æ—Å—ã–ø—å –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º –∏ —Å—É—Ö–∞—Ä–∏–∫–∞–º–∏",
            "–ü–æ–¥–∞–≤–∞–π —Å—Ä–∞–∑—É"
        ]
    },
    "–æ–ª–∞–¥—å–∏": {
        "name": "–û–ª–∞–¥—å–∏",
        "ingredients": ["–º—É–∫–∞", "–º–æ–ª–æ–∫–æ", "—è–π—Ü–∞", "—Å–∞—Ö–∞—Ä", "—Å–æ–ª—å", "–¥—Ä–æ–∂–∂–∏", "—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ_–º–∞—Å–ª–æ"],
        "optional": ["–≤–∞–Ω–∏–ª–∏–Ω"],
        "instructions": [
            "–ü–æ–¥–æ–≥—Ä–µ–π –º–æ–ª–æ–∫–æ –¥–æ —Ç–µ–ø–ª–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            "–†–∞—Å—Ç–≤–æ—Ä–∏ –¥—Ä–æ–∂–∂–∏ –≤ –º–æ–ª–æ–∫–µ —Å —Å–∞—Ö–∞—Ä–æ–º",
            "–î–æ–±–∞–≤—å —è–π—Ü–∞ –∏ —Å–æ–ª—å",
            "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤—å –º—É–∫—É, —Ä–∞–∑–º–µ—à–∏–≤–∞—è",
            "–ó–∞–º–µ—Å–∏ —Ç–µ—Å—Ç–æ –¥–æ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ü–∏–∏ —Å–º–µ—Ç–∞–Ω—ã",
            "–ù–∞–∫—Ä–æ–π –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ–º, –¥–∞–π –ø–æ–¥–æ–π—Ç–∏ 30 –º–∏–Ω—É—Ç",
            "–†–∞–∑–æ–≥—Ä–µ–π –º–∞—Å–ª–æ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ",
            "–í—ã–∫–ª–∞–¥—ã–≤–∞–π —Ç–µ—Å—Ç–æ –ª–æ–∂–∫–æ–π",
            "–ñ–∞—Ä—å —Å –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞",
            "–ü–æ–¥–∞–≤–∞–π —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π –∏–ª–∏ –≤–∞—Ä–µ–Ω—å–µ–º"
        ]
    }
}

def parse_ingredients(text):
    """–ü–∞—Ä—Å–∏—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
        text = text.lower().strip()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[^\w\s,;]', ' ', text)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
        items = []
        for separator in [',', ';', '\n']:
            if separator in text:
                items = [item.strip() for item in text.split(separator) if item.strip()]
                break
        
        if not items:
            items = text.split()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
        normalized = []
        for item in items:
            item = item.strip()
            if len(item) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                # –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                item = item.replace(' ', '_')
                normalized.append(item)
        
        logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: '{text}' -> {normalized}")
        return normalized
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {e}")
        return []

def find_matching_recipes(ingredients):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –∏–º–µ—é—â–∏–º—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"""
    matches = []
    
    for recipe_id, recipe in RECIPES.items():
        required = set(recipe['ingredients'])
        optional = set(recipe.get('optional', []))
        available = set(ingredients)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –µ—Å—Ç—å
        missing_required = required - available
        has_required = len(required - missing_required)
        required_ratio = has_required / len(required)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 70% –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        if required_ratio >= 0.7:
            missing_optional = optional - available
            matches.append({
                'id': recipe_id,
                'name': recipe['name'],
                'missing_required': list(missing_required),
                'missing_optional': list(missing_optional),
                'score': required_ratio
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–º–µ—é—â–∏—Ö—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    matches.sort(key=lambda x: x['score'], reverse=True)
    return matches

def get_recipe_instructions(recipe_id, name, gender):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞"""
    if recipe_id not in RECIPES:
        return []
    
    recipe = RECIPES[recipe_id]
    instructions = []
    
    for i, step in enumerate(recipe['instructions'], 1):
        instructions.append(bati_cooking_step(i, step, name, gender))
    
    return instructions

# --- Conversation flows ---
def start_cooking_flow(chat_id, user_id, name, gender):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –¥–∏–∞–ª–æ–≥"""
    save_session(user_id, "ask_ingredients", {"name": name, "gender": gender})
    greeting = bati_greeting(name, gender)
    ingredients_ask = bati_ingredients_ask(name, gender)
    
    send_message(chat_id, greeting)
    send_message(chat_id, ingredients_ask)

def handle_ingredients(chat_id, user_id, text, name, gender):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
    try:
        logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ—Ç {name}: {text}")
        ingredients = parse_ingredients(text)
        logger.info(f"üìã –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}")
        
        if not ingredients:
            pronouns = get_gender_pronoun(gender)
            send_message(chat_id, f"–°–ª—É—à–∞–π, {name}, {pronouns['address']}, —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª! –ù–∞–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤! –ë–ª—è—Ç—å, –∫–∞–∫ –∂–µ —è —Ç–µ–±—è –ø–æ–π–º—É? üòÖ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        save_session(user_id, "show_recipes", {"ingredients": ingredients, "name": name, "gender": gender})
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
        matches = find_matching_recipes(ingredients)
        logger.info(f"üç≥ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: {len(matches)}")
        
        if not matches:
            send_message(chat_id, bati_no_ingredients(name, gender))
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
        send_message(chat_id, bati_recipe_found(name, gender, len(matches)))
        
        recipe_options = []
        for i, match in enumerate(matches[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            missing_text = ""
            if match['missing_required']:
                missing_text = f" (–Ω—É–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å: {', '.join(match['missing_required'])})"
            recipe_options.append((f"{match['name']}{missing_text}", f"recipe_{match['id']}"))
        
        keyboard = build_inline_keyboard(recipe_options)
        send_message(chat_id, "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å:", reply_markup=keyboard)
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤: {e}")
        send_message(chat_id, "–ë–ª—è—Ç—å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

def handle_recipe_selection(chat_id, user_id, recipe_id, name, gender):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ—Ü–µ–ø—Ç–∞"""
    if recipe_id not in RECIPES:
        send_message(chat_id, "–ë–ª—è—Ç—å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        return
    
    recipe = RECIPES[recipe_id]
    save_session(user_id, "cooking", {"recipe_id": recipe_id, "name": name, "gender": gender, "step": 0})
    
    intro = bati_recipe_intro(name, gender, recipe['name'])
    send_message(chat_id, intro)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ingredients_text = f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n‚Ä¢ {', '.join(recipe['ingredients'])}"
    if recipe.get('optional'):
        ingredients_text += f"\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {', '.join(recipe['optional'])}"
    
    send_message(chat_id, ingredients_text)
    
    # –ù–∞—á–∏–Ω–∞–µ–º –≥–æ—Ç–æ–≤–∫—É
    instructions = get_recipe_instructions(recipe_id, name, gender)
    if instructions:
        send_message(chat_id, "–ù—É —á—Ç–æ, –Ω–∞—á–∏–Ω–∞–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å! –ï–±–∞—Ç—å, –∫–∞–∫–∞—è –≤–∫—É—Å–Ω—è—Ç–∏–Ω–∞ –±—É–¥–µ—Ç! üî•")
        send_message(chat_id, instructions[0])

def handle_cooking_step(chat_id, user_id, name, gender):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≥–æ—Ç–æ–≤–∫–∏"""
    session = get_session(user_id)
    if not session or session['stage'] != 'cooking':
        return
    
    recipe_id = session['data']['recipe_id']
    current_step = session['data'].get('step', 0)
    
    instructions = get_recipe_instructions(recipe_id, name, gender)
    
    if current_step + 1 < len(instructions):
        next_step = current_step + 1
        save_session(user_id, "cooking", {**session['data'], "step": next_step})
        
        send_message(chat_id, instructions[next_step])
        
        if next_step == len(instructions) - 1:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥
            pronouns = get_gender_pronoun(gender)
            send_message(chat_id, f"–ì–æ—Ç–æ–≤–æ, {name}, {pronouns['address']}! –ï–±–∞—Ç—å, –∫–∞–∫–∞—è –≤–∫—É—Å–Ω—è—Ç–∏–Ω–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçΩÔ∏è")
            send_message(chat_id, "–•–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ? –ù–∞–ø–∏—à–∏ /start")
    else:
        # –ì–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        pronouns = get_gender_pronoun(gender)
        send_message(chat_id, f"–û—Ç–ª–∏—á–Ω–æ, {name}, {pronouns['address']}! –ë–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ! –ï–±–∞—Ç—å, –∫–∞–∫ –∂–µ —ç—Ç–æ –≤–∫—É—Å–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçΩÔ∏è")
        send_message(chat_id, "–•–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ? –ù–∞–ø–∏—à–∏ /start")

# --- Health check ---
@app.route("/", methods=["GET"])
def health_check():
    return "Cooking Bot is running! üë®‚Äçüç≥", 200

@app.route("/health", methods=["GET"])
def health():
    return {"status": "ok", "bot": "cooking-mentor"}, 200

# --- Webhook ---
@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    try:
        data = request.get_json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {data}")
        if not data:
            logger.info("‚ùå –ü—É—Å—Ç–æ–π webhook")
            return "OK", 200

        if "callback_query" in data:
            cb = data["callback_query"]
            callback_id = cb.get("id")
            chat_id = cb.get("message", {}).get("chat", {}).get("id")
            action = cb.get("data")
            user = cb.get("from", {})
            user_id = user.get("id")

            if callback_id and callback_id in processed_callback_ids:
                return "OK", 200
            if callback_id:
                processed_callback_ids.add(callback_id)
                answer_callback_query(callback_id)

            if action and action.startswith("recipe_"):
                recipe_id = action.replace("recipe_", "")
                session = get_session(user_id)
                if session:
                    name = session['data'].get('name', '–¥–µ—Ç–∫–∞')
                    gender = session['data'].get('gender', 'unknown')
                    handle_recipe_selection(chat_id, user_id, recipe_id, name, gender)
                return "OK", 200

            if action == "next_step":
                session = get_session(user_id)
                if session:
                    name = session['data'].get('name', '–¥–µ—Ç–∫–∞')
                    gender = session['data'].get('gender', 'unknown')
                    handle_cooking_step(chat_id, user_id, name, gender)
                return "OK", 200

            send_message(chat_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
            return "OK", 200

        if "message" not in data:
            logger.info("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
            return "OK", 200
        msg = data["message"]
        chat_id = msg["chat"]["id"]
        user = msg.get("from", {})
        user_id = user.get("id")
        
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")

        # Dedup
        msg_hash = get_message_hash(msg)
        if msg_hash in processed_messages:
            logger.info(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return "OK", 200
        processed_messages.add(msg_hash)

        upsert_user(user_id, user.get("username"))

        if "text" in msg:
            text = msg["text"].strip()
            logger.info(f"üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'")
            
            if text == "/start":
                logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                save_session(user_id, "ask_name", {})
                send_message(chat_id, bati_name_ask())
                return "OK", 200

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
            session = get_session(user_id)
            if session and session['stage'] == 'ask_name':
                name = text.strip()
                if len(name) < 2:
                    send_message(chat_id, "–ë–ª—è—Ç—å, –¥–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∏–º—è —Å–∫–∞–∂–∏! –ù–µ –º–µ–Ω—å—à–µ –¥–≤—É—Ö –±—É–∫–≤! üò§")
                    return "OK", 200
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏
                gender = detect_gender_by_name(name)
                if gender == "unknown":
                    gender = "male"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                upsert_user(user_id, user.get("username"), gender)
                save_session(user_id, "ask_ingredients", {"name": name, "gender": gender})
                
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
                greeting = bati_greeting(name, gender)
                ingredients_ask = bati_ingredients_ask(name, gender)
                
                send_message(chat_id, greeting)
                send_message(chat_id, ingredients_ask)
                return "OK", 200

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø—Ä–∞–≤–∫—É –ø–æ–ª–∞
            gender_correction = detect_gender_correction(text)
            if gender_correction:
                session = get_session(user_id)
                if session and session['data'].get('name'):
                    name = session['data']['name']
                    old_gender = session['data'].get('gender', 'unknown')
                    
                    if old_gender != gender_correction:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª
                        upsert_user(user_id, user.get("username"), gender_correction)
                        save_session(user_id, session['stage'], {**session['data'], "gender": gender_correction})
                        
                        correction_msg = bati_gender_correction(name, old_gender, gender_correction)
                        send_message(chat_id, correction_msg)
                        return "OK", 200

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            if session and session['stage'] == 'ask_ingredients':
                name = session['data'].get('name', '–¥–µ—Ç–∫–∞')
                gender = session['data'].get('gender', 'unknown')
                handle_ingredients(chat_id, user_id, text, name, gender)
                return "OK", 200

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –≥–æ—Ç–æ–≤–∫–∏
            if session and session['stage'] == 'cooking':
                if text.lower() in ['–¥–∞–ª–µ–µ', '–¥–∞–ª—å—à–µ', '—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥', '–≥–æ—Ç–æ–≤–æ', '–æ–∫', 'ok', '–¥–∞', '–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º']:
                    name = session['data'].get('name', '–¥–µ—Ç–∫–∞')
                    gender = session['data'].get('gender', 'unknown')
                    handle_cooking_step(chat_id, user_id, name, gender)
                    return "OK", 200

            # –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
            if any(word in text.lower() for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ']):
                session = get_session(user_id)
                if session and session['data'].get('name'):
                    name = session['data']['name']
                    gender = session['data'].get('gender', 'unknown')
                    pronouns = get_gender_pronoun(gender)
                    send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {name}, {pronouns['address']}! –ï–±–∞—Ç—å, –∫–∞–∫–æ–π —Ç—ã –≤–µ–∂–ª–∏–≤—ã–π! –†–∞–¥ –ø–æ–º–æ—á—å! üòä")
                else:
                    send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ï–±–∞—Ç—å, –∫–∞–∫–æ–π —Ç—ã –≤–µ–∂–ª–∏–≤—ã–π! –†–∞–¥ –ø–æ–º–æ—á—å! üòä")
                return "OK", 200

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
            session = get_session(user_id)
            if session and session['data'].get('name'):
                name = session['data']['name']
                gender = session['data'].get('gender', 'unknown')
                pronouns = get_gender_pronoun(gender)
                send_message(chat_id, f"–°–ª—É—à–∞–π, {name}, {pronouns['address']}, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å! –ë–ª—è—Ç—å, –∫–∞–∫ –∂–µ —è —Ç–µ–±—è –ø–æ–π–º—É? üë®‚Äçüç≥")
            else:
                send_message(chat_id, "–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å! –ë–ª—è—Ç—å, –∫–∞–∫ –∂–µ —è —Ç–µ–±—è –ø–æ–π–º—É? üë®‚Äçüç≥")

        return "OK", 200
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
        return "OK", 200

def set_webhook():
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        webhook_url = WEBHOOK_URL.rstrip("/") + "/webhook"
        resp = requests.post(url, json={"url": webhook_url}, timeout=10)
        if resp.ok:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {resp.status_code} - {resp.text}")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞-–±–∞—Ç–∏...")
    
    # Initialize database
    try:
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        sys.exit(1)
    
    # Set webhook
    try:
        set_webhook()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        # Don't exit, continue without webhook for testing

    # Get port from environment (Render sets this)
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # Run Flask app
    app.run(
        host="0.0.0.0",  # Important for Docker
        port=port,
        debug=False,  # Disable debug in production
        threaded=True  # Enable threading for better performance
    )