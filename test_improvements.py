#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞-–±–∞—Ç–∏
"""

import re

def extract_name_from_text(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏–∑ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    text_clean = re.sub(r'\s+', ' ', text.strip())
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏
    patterns = [
        r'–º–µ–Ω—è –∑–æ–≤—É—Ç\s+(\w+)',
        r'—è\s+(\w+)',
        r'–∑–æ–≤–∏—Ç–µ –º–µ–Ω—è\s+(\w+)',
        r'–º–æ–µ –∏–º—è\s+(\w+)',
        r'–∏–º—è\s+(\w+)',
        r'^(\w+)\s',  # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
        r'(\w+)$'     # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text_clean, re.IGNORECASE)
        if match:
            name = match.group(1).strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–ª–æ–≤–æ
            if len(name) >= 2 and name.lower() not in ['–º–µ–Ω—è', '–∑–æ–≤—É—Ç', '–º–æ–µ', '–∏–º—è', '—ç—Ç–æ', '–≤–æ—Ç', '—Ç–∞–∫', '–¥–∞', '–Ω–µ—Ç']:
                return name.capitalize()
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
    words = text_clean.split()
    for word in words:
        if len(word) >= 2 and word.isalpha():
            return word.capitalize()
    
    return None

def test_name_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    test_cases = [
        ("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞", "–ê–Ω–Ω–∞"),
        ("–Ø –ú–∞—Ä–∏—è", "–ú–∞—Ä–∏—è"),
        ("–ó–æ–≤–∏—Ç–µ –º–µ–Ω—è –ü–µ—Ç—Ä", "–ü–µ—Ç—Ä"),
        ("–ú–æ–µ –∏–º—è –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞"),
        ("–ò–º—è –î–º–∏—Ç—Ä–∏–π", "–î–º–∏—Ç—Ä–∏–π"),
        ("–ê–Ω–Ω–∞", "–ê–Ω–Ω–∞"),
        ("–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –û–ª—å–≥–∞, —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", "–û–ª—å–≥–∞"),
        ("–Ø —Å—Ç—É–¥–µ–Ω—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω", "–ò–≤–∞–Ω"),
        ("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞, –∞ —Ç–µ–±—è –∫–∞–∫?", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞"),
        ("–î–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω, –º–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏—Ö–∞–∏–ª", "–ú–∏—Ö–∞–∏–ª"),
        ("–ù–µ—Ç, —è –Ω–µ —Ö–æ—á—É", None),  # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None
        ("–î–∞", None),  # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None
        ("", None),  # –î–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å None
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏:")
    print("=" * 50)
    
    for i, (input_text, expected) in enumerate(test_cases, 1):
        result = extract_name_from_text(input_text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{i:2d}. {status} '{input_text}' -> '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")
    
    print()

def test_dialogue_patterns():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∏–∞–ª–æ–≥–∞"""
    test_cases = [
        ("–∫–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å", True, "–≤–æ–ø—Ä–æ—Å –æ –≥–æ—Ç–æ–≤–∫–µ"),
        ("—á—Ç–æ –¥–µ–ª–∞—Ç—å", True, "–≤–æ–ø—Ä–æ—Å –æ –≥–æ—Ç–æ–≤–∫–µ"),
        ("–ø–æ–º–æ–≥–∏", True, "–ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏"),
        ("–Ω–µ –ø–æ–Ω–∏–º–∞—é", True, "–ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏"),
        ("—Å–ø–∞—Å–∏–±–æ", True, "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"),
        ("–æ—Ç–ª–∏—á–Ω–æ", True, "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"),
        ("–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", True, "–∂–∞–ª–æ–±–∞"),
        ("–∫—Ç–æ —Ç—ã", True, "–≤–æ–ø—Ä–æ—Å –æ –±–∞—Ç–µ"),
        ("–ø—Ä–∏–≤–µ—Ç", False, "–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        ("–∫–∞–∫ –¥–µ–ª–∞", True, "–≤–æ–ø—Ä–æ—Å –æ –±–∞—Ç–µ"),
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–∏–∞–ª–æ–≥–∞:")
    print("=" * 50)
    
    for i, (text, should_match, description) in enumerate(test_cases, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = [
            ['–∫–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å', '–∫–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–ø–æ–º–æ–≥–∏', '–æ–±—ä—è—Å–Ω–∏'],
            ['–ø–æ–º–æ–≥–∏', '–Ω–µ –ø–æ–Ω–∏–º–∞—é', '–Ω–µ –∑–Ω–∞—é', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫'],
            ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ', '–∫–ª–∞—Å—Å–Ω–æ', '—Å—É–ø–µ—Ä'],
            ['–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '—Å–ª–æ–º–∞–ª–æ—Å—å'],
            ['–∫—Ç–æ —Ç—ã', '—á—Ç–æ —Ç—ã', '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å']
        ]
        
        matched = False
        for pattern_list in patterns:
            if any(word in text.lower() for word in pattern_list):
                matched = True
                break
        
        status = "‚úÖ" if matched == should_match else "‚ùå"
        print(f"{i:2d}. {status} '{text}' -> {matched} ({description})")
    
    print()

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –±–æ—Ç–∞-–±–∞—Ç–∏")
    print("=" * 60)
    print()
    
    test_name_extraction()
    test_dialogue_patterns()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print()
    print("üìã –ß—Ç–æ —É–ª—É—á—à–µ–Ω–æ:")
    print("‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("‚Ä¢ –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞ –¥–∏–∞–ª–æ–≥–∞")
    print("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π, –∂–∞–ª–æ–±")
    print("‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —É—á–µ—Ç–æ–º –∏–º–µ–Ω–∏ –∏ –ø–æ–ª–∞")
